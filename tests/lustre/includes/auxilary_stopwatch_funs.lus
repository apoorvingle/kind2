-------------------------
-- Auxiliary operators --
-------------------------
node Even (N: int) returns (B: bool) ;
let
  B = (N mod 2 = 0) ; 
tel

node ToInt (X: bool) returns (N: int) ;
let
  N = if X then 1 else 0 ;
tel

node Count (X: bool) returns (N: int) ;
let
  N = ToInt(X) -> ToInt(X) + pre N ;  
tel

node Sofar ( X : bool ) returns ( Y : bool ) ;
let
 Y = X -> (X and (pre Y)) ;
tel

node Since ( X, Y : bool ) returns ( Z : bool ) ;
let
  Z =  X or (Y and (false -> pre Z)) ;
tel


node SinceIncl ( X, Y : bool ) returns ( Z : bool ) ;
let
  Z =  Y and (X or (false -> pre Z)) ;
tel

node Increased (N: int) returns (B: bool) ;
let
  B = true -> N > pre N ;
tel

node Stable (N: int) returns (B: bool) ;
let
  B = true -> N = pre N ;
tel
